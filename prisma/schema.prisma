generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                Int      @id(map: "pk_account") @default(autoincrement())
  username          String?  @unique(map: "unique_username") @db.VarChar(50)
  password          String?  @db.VarChar(100)
  active            Boolean? @default(false)
  wrong_attempt     Int?     @default(0) @db.SmallInt
  wrong_otp_attempt Int?     @default(0) @db.SmallInt
  last_login        Int?
  status            Int?
  locked            Boolean? @default(false)
  is_deleted        Boolean? @default(false)
  mpin              Int?
  device_type       String?  @db.VarChar(20)
  device_id         String?  @db.VarChar(255)
  created_ts        Int?     @default(dbgenerated("EXTRACT(epoch FROM now())"))
  updated_ts        Int?
  users             users[]
}

model enrollment {
  id          Int     @id(map: "pk_enrollment") @default(autoincrement())
  guid        String? @unique(map: "unique_guid") @db.VarChar(250)
  start_date  Int?
  expiry_date Int?
  type        String? @db.VarChar(50)
  status      String? @db.VarChar(10)
  created_ts  Int?    @default(dbgenerated("EXTRACT(epoch FROM now())"))
  updated_ts  Int?
  user_id     Int?
  users       users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}

model permission {
  id              Int               @id(map: "pk_permission") @default(autoincrement())
  name            String?           @db.VarChar(255)
  code            String?
  role_permission role_permission[]
}

model role {
  id              Int               @id(map: "pk_role") @default(autoincrement())
  name            String?           @db.VarChar(250)
  role_permission role_permission[]
  user_role       user_role[]
}

model role_permission {
  id            Int         @id(map: "pk_role_permission") @default(autoincrement())
  role_id       Int?
  permission_id Int?
  created_ts    Int?        @default(dbgenerated("EXTRACT(epoch FROM now())"))
  updated_ts    Int?
  permission    permission? @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role_permission_permission")
  role          role?       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role_permission_role")
}

model user_role {
  id         Int    @id(map: "pk_user_role") @default(autoincrement())
  user_id    Int?
  role_id    Int?
  start_date Int?
  end_date   Int?
  created_ts Int?   @default(dbgenerated("EXTRACT(epoch FROM now())"))
  updated_ts Int?
  role       role?  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_role_role")
  users      users? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_role_user")
}

model users {
  id         Int          @id(map: "pk_users") @default(autoincrement())
  first_name String?      @db.VarChar(250)
  last_name  String?      @db.VarChar(250)
  phone      String?      @db.VarChar(12)
  email      String?      @unique(map: "unique_email") @db.VarChar(50)
  type       String?      @db.VarChar(10)
  is_deleted Boolean?     @default(false)
  created_ts Int?         @default(dbgenerated("EXTRACT(epoch FROM now())"))
  updated_ts Int?
  account_id Int?
  enrollment enrollment[]
  user_role  user_role[]
  account    account?     @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_users_account")
}

model action {
  id          BigInt        @id @default(autoincrement())
  action_name String        @db.VarChar(50)
  created_ts  DateTime?     @default(now()) @db.Timestamp(6)
  updated_ts  DateTime?     @default(now()) @db.Timestamp(6)
  role_action role_action[]
}

model role_action {
  id         Int       @id @default(autoincrement())
  role_id    Int
  action_id  BigInt
  status     Int?      @default(1)
  created_ts DateTime? @default(now()) @db.Timestamp(6)
  updated_ts DateTime? @default(now()) @db.Timestamp(6)
  action     action    @relation(fields: [action_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
